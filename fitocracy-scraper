#!/usr/bin/env ruby
# class FitocracyScraper
require 'rubygems'
require 'commander'
require 'pg'
require 'pry'
require 'selenium-webdriver'
require 'sequel'
require 'terminal-notifier'
require 'terminal-table'

class FitocracyScraper
  include Commander::Methods

  # rubocop:disable Metrics/AbcSize, Metrics/MethodLength
  def run
    table_styles = { margin_left: ' ' * 6, width: 45 }

    program :name, 'Fitocracy Scraper'
    program :version, '1.0.0'
    program :description, 'An application that syncs data from Fitocracy to a local postgresql server.'
    program :help, 'Usage:', "Script useage is very simplistic, provide a valid fitocracy user name and password and this
        will login and parse through html streams to copy data into a postgresql database. Once completed, a system
        notification will be sent.

          Sample Schema:

    #{Terminal::Table.new(title: 'exercises', rows: [%w[id name]], style: table_styles)}

    #{Terminal::Table.new(title: 'workouts', rows: [%w[id date]], style: table_styles)}

    #{Terminal::Table.new(title: 'super_sets', rows: [%w[id]], style: table_styles)}

    #{Terminal::Table.new(title: 'set_groups', rows: [%w[id exercise_id super_set_id comment]], style: table_styles)}

    #{Terminal::Table.new(title: 'sets', rows: [%w[id set_group_id name reps pr]], style: table_styles)}"

    global_option('-u', '--user username', 'REQUIRED: You must provider a user name')
    global_option('-p', '--password password', 'REQUIRED: You must provider the corresponding password')
    global_option('-d', '--database database_name', 'The default database name is fitocracy_dump, this will override that')

    default_command :run

    command :run do |command|
      command.action do |_args, options|
        if options.default[:user].nil?
          puts 'You must provide a username: -u username' unless options.default[:user]
        elsif options.default[:password].nil?
          puts 'You must provide a password: -p password' unless options.default[:password]
        else
          @username = options.default[:user]
          @password = options.default[:password]
          setup_database(options)

          begin_scrape
        end
      end
    end

    run!
  end
  # rubocop:enable Metrics/AbcSize, Metrics/MethodLength

  def begin_scrape
    setup_driver
    authenticate
    parse_and_store_data

    @database.disconnect
    @driver.quit
    notify 'Done!', 'ðŸŽ‰'
  end

  def authenticate
    @driver.get('http://fitocracy.com')
    @driver.find_element(link_text: 'Log In').click

    login_form = @driver.find_element(id: 'login-modal-form')
    login_form.find_element(name: 'username').send_keys(@username)
    login_form.find_element(name: 'password').send_keys(@password)
    login_form.submit

    wait_for_profile_id
    notify "Logged in as #{@username} (#{@profile_id})"
  end

  def document_ready
    @driver.execute_script('return document.readyState') == 'complete'
  end

  def notify(message, symbol = 'â–¶')
    TerminalNotifier.notify message
    puts "#{symbol} #{message}"
  end

  def parse_and_store_data
    @page ||= 0
    @driver.get("https://www.fitocracy.com/activity_stream/#{@page}/?user_id=#{@profile_id}")

    workouts = @driver.find_elements :css, '[data-ag-type="workout"]'

    workouts.each do |workout|
      parse_and_store_element workout
    end
  end

  def parse_and_store_element(workout)
    element_time = "#{workout.find_element(css: '.action_time').text}Z"
    Time.parse(element_time)
  end

  def setup_database(options)
    database_name = options.default[:database] || 'fitocracy_dump'

    Sequel.connect(adapter: :postgres, database: 'postgres') do |db|
      db.execute 'SET client_min_messages TO WARNING'
      db.execute "DROP DATABASE IF EXISTS #{database_name}"
      db.execute "CREATE DATABASE #{database_name}"
    end

    @database = Sequel.connect(adapter: :postgres, database: database_name)

    setup_tables
    setup_models

    notify "Connected to database: #{database_name}"
  end

  def setup_driver
    driver_options = Selenium::WebDriver::Chrome::Options.new args: ['headless']
    @driver = Selenium::WebDriver.for :chrome, options: driver_options
    @driver.manage.timeouts.implicit_wait = 10
    notify 'Browser Setup'
  end

  def setup_models
    Dir[File.dirname(__FILE__) + '/models/*'].each { |file| require file }
  end

  def create_exercises_table
    @database.create_table :exercises do
      primary_key :id
      String      :name
      Integer     :count
    end
  end

  def create_set_groups_table
    @database.create_table :set_groups do
      primary_key :id
      foreign_key :workout_id,   :workouts
      foreign_key :exercise_id,  :exercises
      foreign_key :super_set_id, :set_groups
    end
  end

  def create_sets_table
    @database.create_table :sets do
      primary_key :id
      foreign_key :set_group_id, :set_groups
      String      :name
      Integer     :reps
      TrueClass   :pr, default: false
    end
  end

  def create_super_sets_table
    @database.create_table :super_sets do
      primary_key :id
    end
  end

  def create_workouts_table
    @database.create_table :workouts do
      primary_key :id
      DateTime    :date
    end
  end

  def setup_tables
    tables = %w[exercises workouts super_sets set_groups sets]
    tables.each { |table| public_send "create_#{table}_table" }
  end

  def wait_for_profile_id
    sleep 0.1
    if document_ready
      @profile_id = @driver.execute_script('return typeof(user_id) === "undefined" ? "waiting" : user_id;')
      wait_for_profile_id if @profile_id == 'waiting'
    else
      wait_for_profile_id
    end
  end
end

FitocracyScraper.new.run if $PROGRAM_NAME == __FILE__
